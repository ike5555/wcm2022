<h1>About</h1>
<p>cmsimde_site</p>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython_stdlib.js"></script>
<div id="brython_div"></div>
<script type="text/python">
from browser import document as doc
from browser import html
import random
canvas = html.CANVAS(width = 230, height = 1300, id="canvas")
brython_div = doc["brython_div"]
brython_div <= canvas
ctx = canvas.getContext("2d")
class Figure:
    x = 0
    y = 0

    figures = [
        [[1, 5, 9, 13], [4, 5, 6, 7]],
        [[4, 5, 9, 10], [2, 6, 5, 9]],
        [[6, 7, 9, 10], [1, 5, 6, 10]],
        [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],
        [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],
        [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],
        [[1, 2, 5, 6]],
    ]

    def __init__(self, x, y, no, color, rotate):
        self.x = x
        self.y = y
        #self.type = random.randint(0, len(self.figures) - 1)
        self.type = no
        self.color = color
        self.rotation = rotate

    def image(self):
        return self.figures[self.type][self.rotation]

    def rotate(self):
        self.rotation = (self.rotation + 1) % len(self.figures[self.type])
  
colors = [
    (0, 0, 0),
    (120, 37, 179),
    (100, 179, 179),
    (80, 34, 22),
    (80, 134, 22),
    (180, 34, 22),
    (180, 34, 122),
    (150, 54, 199),
    (210, 0,  30),
    (14, 100, 80),
]


BLACK = '#%02x%02x%02x' % (0, 0, 0)
WHITE = '#%02x%02x%02x' % (255, 255, 255)
GRAY = '#%02x%02x%02x' % (128, 128, 128)
height = 200
width = 30
x = 100
y = 60
zoom = 30
figure = None 
field = []
for i in range(height):
    new_line = []
    for j in range(width):
        new_line.append(0)
        field.append(new_line)
   
for i in range(height):
 for j in range(width):
  ctx.fillStyle = WHITE
  ctx.fillRect(x + zoom * j, y + zoom * i, zoom, zoom)
  if field[i][j] > 0:
   ctx.fillStyle = '#%02x%02x%02x' % colors[field[i][j]]
   ctx.fillRect(x + zoom * j + 1, y + zoom * i + 1, zoom - 2, zoom - 1)
  ctx.lineWidth = 1
  ctx.strokeStyle = GRAY
  ctx.beginPath()
  ctx.rect(x + zoom * j, y + zoom * i, zoom, zoom)
  ctx.stroke()

for xx in range(7):
      figure = Figure(0, xx*6, xx, xx, 0)
      for i in range(4):
            for j in range(4):
                  p = i * 4 + j
                  if p in figure.image():
                        ctx.fillStyle = '#%02x%02x%02x' % colors[figure.color]
                  else:
                        ctx.fillStyle = WHITE      
                  ctx.fillRect(x + zoom * (j + figure.x) + 1,
         y + zoom * (i + figure.y) + 1,
         zoom - 2, zoom - 2)
</script>
<!--導入 brython.js 程式庫-->
<script src="https://mde.tw/wcm2022_guide/cmsimde/static/brython.js"></script>
<!--導入 brython_stdlib.js 標準程式庫-->
<script src="https://mde.tw/wcm2022_guide/cmsimde/static/brython_stdlib.js"></script>
<!--啟動 brython-->
<script>
window.onload=function(){
  brython();
  }
</script>
<!--執行所需要的 Brython 程式-->
<script type="text/python3">
# 畫中華民國國旗
# 導入 doc
from browser import document as doc
# 以下將利用 html 產生所需的繪圖畫布
from browser import html
# 利用 math 函式庫執行三角函數運算
import math
canvas = html.CANVAS(width = 400, height = 600)
#canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
# 將圖畫至 id 為 brython_div 的 cnavas 標註
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(200,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x+200 + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x+200, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x+200, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<div id="brython_div"></div>
<h2>Ex2</h2>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython_stdlib.js"></script>
<div id="brython_div"></div>
<script type="text/python">
# 畫中華民國國旗
# 導入 doc
from browser import document as doc
# 以下將利用 html 產生所需的繪圖畫布
from browser import html
# 利用 math 函式庫執行三角函數運算
import math
canvas = html.CANVAS(width = 400, height = 600)
#canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
# 將圖畫至 id 為 brython_div 的 cnavas 標註
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(flag_w/2,0,flag_w,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_h/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x +flag_w/2+ math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x+flag_w/2, circle_y, flag_h*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x+flag_w/2, circle_y, flag_h/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<h2>Ex2</h2>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython_stdlib.js"></script>
<div id="brython_div"></div>
<script type="text/python">
# 畫中華民國國旗
# 導入 doc
from browser import document as doc
# 以下將利用 html 產生所需的繪圖畫布
from browser import html
# 利用 math 函式庫執行三角函數運算
import math
canvas = html.CANVAS(width = 400, height = 600)
#canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
# 將圖畫至 id 為 brython_div 的 cnavas 標註
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(flag_w/2,0,flag_w,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_h/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x +flag_w/2+ math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x+flag_w/2, circle_y, flag_h*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x+flag_w/2, circle_y, flag_h/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<h2>Ex2</h2>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3/brython_stdlib.js"></script>
<div id="brython_div"></div>
<script type="text/python">
# 畫中華民國國旗
# 導入 doc
from browser import document as doc
# 以下將利用 html 產生所需的繪圖畫布
from browser import html
# 利用 math 函式庫執行三角函數運算
import math
canvas = html.CANVAS(width = 400, height = 600)
#canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
# 將圖畫至 id 為 brython_div 的 cnavas 標註
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(flag_w/2,0,flag_w,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_h/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x +flag_w/2+ math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x+flag_w/2, circle_y, flag_h*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x+flag_w/2, circle_y, flag_h/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<p># 畫中華人民共和國國旗 # 根據 https://en.wikipedia.org/wiki/Flag_of_China 規格繪圖 # 導入 doc from browser import document as doc # 以下將利用 html 產生所需的繪圖畫布 from browser import html # 利用 math 函式庫執行三角函數運算 import math canvas = html.CANVAS(width = 600, height = 300) #canvas.style = {"width": "100%"} canvas.id = "taiwan_flag" # 將圖畫至 id 為 brython_div 的 cnavas 標註 brython_div = doc["brython_div"] brython_div &lt;= canvas # 準備繪圖畫布 canvas = doc["taiwan_flag"] ctx = canvas.getContext("2d") # 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點 # ctx.setTransform(1, 0, 0, -1, 0, canvas.height) # 以下採用 canvas 原始座標繪圖 flag_w = canvas.width flag_h = canvas.height #color color_BLUE='#4863a0' color_RED ='#B31942' color_YELLOW ='#FFFF00' color_WHITE ='#FFFFFF' # 先畫滿地紅 ctx.fillStyle=color_BLUE ctx.fillRect(0,0,flag_w,flag_h) ctx.strokeStyle=color_WHITE ctx.beginPath() ctx.moveTo(0, 0) ctx.lineTo(600, 300) ctx.lineWidth = 60 ctx.stroke() ctx.moveTo(0,300 ) ctx.lineTo(600,0) ctx.lineWidth = 60 ctx.stroke() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(0,0) ctx.lineTo(200,100) ctx.lineTo(155,100) ctx.lineTo(0,22) ctx.lineTo(0,0) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(600,300) ctx.lineTo(600,300-22) ctx.lineTo(600-155,200) ctx.lineTo(400, 200) ctx.lineTo(600,300) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(0,300) ctx.lineTo(45,300) ctx.lineTo(245,200) ctx.lineTo(200,200) ctx.lineTo(0,300) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(600,0) ctx.lineTo(400,100) ctx.lineTo(600-245,100) ctx.lineTo(600-45,0) ctx.lineTo(600,0) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.strokeStyle=color_WHITE ctx.beginPath() ctx.moveTo(0, 150) ctx.lineTo(600, 150) ctx.lineWidth = 100 ctx.stroke() ctx.closePath() ctx.strokeStyle=color_WHITE ctx.beginPath() ctx.moveTo(300, 0) ctx.lineTo(300, 300) ctx.lineWidth = 100 ctx.stroke() ctx.closePath() ctx.strokeStyle=color_RED ctx.beginPath() ctx.moveTo(300, 0) ctx.lineTo(300, 300) ctx.lineWidth = 60 ctx.stroke() ctx.closePath() ctx.strokeStyle=color_RED ctx.beginPath() ctx.moveTo(0, 150) ctx.lineTo(600, 150) ctx.lineWidth = 60 ctx.stroke() ctx.closePath()</p>
<p># 畫中華人民共和國國旗 # 根據 https://en.wikipedia.org/wiki/Flag_of_China 規格繪圖 # 導入 doc from browser import document as doc # 以下將利用 html 產生所需的繪圖畫布 from browser import html # 利用 math 函式庫執行三角函數運算 import math canvas = html.CANVAS(width = 600, height = 300) #canvas.style = {"width": "100%"} canvas.id = "taiwan_flag" # 將圖畫至 id 為 brython_div 的 cnavas 標註 brython_div = doc["brython_div"] brython_div &lt;= canvas # 準備繪圖畫布 canvas = doc["taiwan_flag"] ctx = canvas.getContext("2d") # 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點 # ctx.setTransform(1, 0, 0, -1, 0, canvas.height) # 以下採用 canvas 原始座標繪圖 flag_w = canvas.width flag_h = canvas.height #color color_BLUE='#4863a0' color_RED ='#B31942' color_YELLOW ='#FFFF00' color_WHITE ='#FFFFFF' # 先畫滿地紅 ctx.fillStyle=color_BLUE ctx.fillRect(0,0,flag_w,flag_h) ctx.strokeStyle=color_WHITE ctx.beginPath() ctx.moveTo(0, 0) ctx.lineTo(600, 300) ctx.lineWidth = 60 ctx.stroke() ctx.moveTo(0,300 ) ctx.lineTo(600,0) ctx.lineWidth = 60 ctx.stroke() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(0,0) ctx.lineTo(200,100) ctx.lineTo(155,100) ctx.lineTo(0,22) ctx.lineTo(0,0) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(600,300) ctx.lineTo(600,300-22) ctx.lineTo(600-155,200) ctx.lineTo(400, 200) ctx.lineTo(600,300) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(0,300) ctx.lineTo(45,300) ctx.lineTo(245,200) ctx.lineTo(200,200) ctx.lineTo(0,300) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.beginPath() ctx.strokeStyle=color_RED ctx.moveTo(600,0) ctx.lineTo(400,100) ctx.lineTo(600-245,100) ctx.lineTo(600-45,0) ctx.lineTo(600,0) ctx.lineWidth = 1 ctx.fillStyle=color_RED ctx.fill() ctx.closePath() ctx.strokeStyle=color_WHITE ctx.beginPath() ctx.moveTo(0, 150) ctx.lineTo(600, 150) ctx.lineWidth = 100 ctx.stroke() ctx.closePath() ctx.strokeStyle=color_WHITE ctx.beginPath() ctx.moveTo(300, 0) ctx.lineTo(300, 300) ctx.lineWidth = 100 ctx.stroke() ctx.closePath() ctx.strokeStyle=color_RED ctx.beginPath() ctx.moveTo(300, 0) ctx.lineTo(300, 300) ctx.lineWidth = 60 ctx.stroke() ctx.closePath() ctx.strokeStyle=color_RED ctx.beginPath() ctx.moveTo(0, 150) ctx.lineTo(600, 150) ctx.lineWidth = 60 ctx.stroke() ctx.closePath()</p>